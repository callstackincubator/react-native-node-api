import fs from "node:fs";
import path from "node:path";
import cp from "node:child_process";

import { FunctionDecl, getNodeApiFunctions } from "./node-api-functions";

export const CPP_SOURCE_PATH = path.join(__dirname, "../cpp");

/**
 * Generates source code which injects the Node API functions from the host.
 */
export function generateSource(functions: FunctionDecl[]) {
  return [
    "// This file is generated by react-native-node-api-modules",
    `#include <Logger.hpp>`,
    `#include <weak_node_api.hpp>`,
    "namespace callstack::nodeapihost {",
    "using node_api::internal::inject_host;",
    "using node_api::internal::NodeApiHost;",
    "void injectIntoWeakNodeApi() {",
    `  log_debug("Injecting WeakNodeApiHost");`,
    "  inject_host(NodeApiHost {",
    ...functions
      .filter(({ kind }) => kind === "engine")
      .flatMap(({ name }) => {
        return [`.${name} = ${name},`];
      }),
    "  });",
    "}",
    "} // namespace callstack::nodeapihost",
  ].join("\n");
}

async function run() {
  const nodeApiFunctions = getNodeApiFunctions();

  const source = generateSource(nodeApiFunctions);
  const sourcePath = path.join(CPP_SOURCE_PATH, "WeakNodeApiInjector.cpp");
  await fs.promises.writeFile(sourcePath, source, "utf-8");
  cp.spawnSync("clang-format", ["-i", sourcePath], { stdio: "inherit" });
}

run().catch((err) => {
  console.error(err);
  process.exitCode = 1;
});
