name: Check

env:
  # Version here should match the one in React Native template and packages/cmake-rn/src/cli.ts
  NDK_VERSION: 27.1.12297006
  # Enabling the Gradle test on CI (disabled by default because it downloads a lot)
  ENABLE_GRADLE_TESTS: true

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/jod
      # Set up JDK and Android SDK only because we need weak-node-api, to build ferric-example and to run the linting
      # TODO: Remove this once we have a way to run linting without building the native code
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: tools platform-tools ndk;${{ env.NDK_VERSION }}
      - run: rustup target add x86_64-linux-android
      - run: npm ci
      - run: npm run build
      # Bootstrap host package to get weak-node-api and ferric-example to get types
      # TODO: Solve this by adding an option to ferric to build only types or by committing the types into the repo as a fixture for an "init" command
      - run: npm run bootstrap --workspace react-native-node-api
      - run: npm run bootstrap --workspace @react-native-node-api/ferric-example
      - run: npm run lint
        env:
          DEBUG: eslint:eslint
      - run: npm run prettier:check
  unit-tests:
    strategy:
      fail-fast: false
      matrix:
        runner:
          - ubuntu-latest
          - windows-latest
          - macos-latest
    runs-on: ${{ matrix.runner }}
    name: Unit tests (${{ matrix.runner }})
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/jod
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: tools platform-tools ndk;${{ env.NDK_VERSION }}
      - run: rustup target add x86_64-linux-android aarch64-linux-android armv7-linux-androideabi i686-linux-android aarch64-apple-ios-sim
      - run: npm ci
      - run: npm run bootstrap
      - run: npm test
  test-ios:
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'Apple 🍎')
    name: Test app (iOS)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/jod
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: tools platform-tools ndk;${{ env.NDK_VERSION }}
      - run: rustup target add x86_64-linux-android aarch64-linux-android armv7-linux-androideabi i686-linux-android aarch64-apple-ios-sim
      - run: npm ci
      - run: npm run bootstrap
        env:
          CMAKE_RN_TRIPLETS: arm64;x86_64-apple-ios-sim
          FERRIC_TARGETS: aarch64-apple-ios-sim
      - run: npm run pod-install
        working-directory: apps/test-app
      - name: Run tests (iOS)
        run: npm run test:ios:allTests
        # TODO: Enable release mode when it works
        # run: npm run test:ios -- --mode Release
        working-directory: apps/test-app
  test-macos:
    # Disabling this on main for now, as initializing the template takes a long time and
    # we don't have macOS-specific code yet
    if: contains(github.event.pull_request.labels.*.name, 'MacOS 💻')
    name: Test app (macOS)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/jod
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
      # Install CMake 3.22.1 since 4.x may have compatibility issues with Hermes build system
      - name: Install compatible CMake version
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.22.1"
      - name: Debug environment before build
        run: |
          echo "=== Xcode and build tools ==="
          xcode-select -p
          which clang || echo "clang not found"
          which clang++ || echo "clang++ not found"
          which make || echo "make not found"
          which cmake || echo "cmake not found"
          echo "=== Environment variables ==="
          echo "PATH=$PATH"
          echo "SDKROOT=$SDKROOT"
          echo "CMAKE_BINARY=$CMAKE_BINARY"
          echo "=== CMake version ==="
          cmake --version || echo "cmake command failed"
      - run: npm ci
      - run: npm run bootstrap
        env:
          CMAKE_RN_TRIPLETS: arm64-apple-darwin
          FERRIC_TARGETS: aarch64-apple-darwin
      - run: npm run init-macos-test-app
      - run: pod install --project-directory=macos
        working-directory: apps/macos-test-app
      - name: Build MacOS test app
        run: npx react-native build-macos --mode Release
        working-directory: apps/macos-test-app
      # TODO: Run the app eventually
  test-android:
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'Android 🤖')
    name: Test app (Android)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/jod
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: tools platform-tools ndk;${{ env.NDK_VERSION }}
      - run: rustup target add x86_64-linux-android aarch64-linux-android armv7-linux-androideabi i686-linux-android aarch64-apple-ios-sim
      - run: npm ci
      - run: npm run bootstrap
        env:
          CMAKE_RN_TRIPLETS: x86_64-linux-android
          FERRIC_TARGETS: x86_64-linux-android
      - name: Clone patched Hermes version
        shell: bash
        run: |
          REACT_NATIVE_OVERRIDE_HERMES_DIR=$(npx react-native-node-api vendor-hermes --silent)
          echo "REACT_NATIVE_OVERRIDE_HERMES_DIR=$REACT_NATIVE_OVERRIDE_HERMES_DIR" >> $GITHUB_ENV
        working-directory: apps/test-app
      # - name: Setup Android Emulator cache
      #   uses: actions/cache@v4
      #   id: avd-cache
      #   with:
      #     path: |
      #       ~/.android/avd/*
      #       ~/.android/adb*
      #     key: ${{ runner.os }}-avd-29
      # See https://github.com/marketplace/actions/android-emulator-runner#running-hardware-accelerated-emulators-on-linux-runners
      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
      - name: Build weak-node-api for all architectures
        run: npm run build-weak-node-api:android
        working-directory: packages/host
      - name: Build ferric-example for all architectures
        run: npm run build -- --android
        working-directory: packages/ferric-example
      - name: Run tests (Android)
        timeout-minutes: 75
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          force-avd-creation: false
          disable-animations: true
          arch: x86_64
          ndk: ${{ env.NDK_VERSION }}
          cmake: 3.22.1
          working-directory: apps/test-app
          script: |
            # Setup port forwarding to Mocha Remote
            adb reverse tcp:8090 tcp:8090
            # Uninstall the app if already in the snapshot (unlikely but could result in a signature mismatch failure)
            adb uninstall com.microsoft.reacttestapp || true
            # Start logcat in background and save logs
            adb logcat > emulator-logcat.txt 2>&1 &
            LOGCAT_PID=$!
            # Build, install and run the app
            npm run test:android:allTests -- --mode Release
            # Wait a bit for the sub-process to terminate, before terminating the emulator
            sleep 5
            # Stop logcat
            kill $LOGCAT_PID || true
      - name: Upload device logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: emulator-logcat
          path: apps/test-app/emulator-logcat.txt
  test-ferric-apple-triplets:
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'Ferric 🦀')
    name: Test ferric Apple triplets
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/jod
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
      - run: rustup target add x86_64-apple-darwin x86_64-apple-ios aarch64-apple-ios aarch64-apple-ios-sim
      - run: rustup toolchain install nightly --component rust-src
      - run: npm ci
      - run: npm run build
      # Build weak-node-api for all Apple architectures
      - run: |
          npm run prepare-weak-node-api
          npm run build-weak-node-api:apple
        working-directory: packages/host
      # Build Ferric example for all Apple architectures
      - run: npx ferric --apple
        working-directory: packages/ferric-example
      - name: Inspect the structure of the prebuilt binary
        run: lipo -info ferric_example.apple.node/*/libferric_example.framework/libferric_example > lipo-info.txt
        working-directory: packages/ferric-example
      - name: Upload lipo info
        uses: actions/upload-artifact@v4
        with:
          name: lipo-info
          path: packages/ferric-example/lipo-info.txt
      - name: Verify Apple triplet builds
        run: |
          # Create expected fixture content
          cat > expected-lipo-info.txt << 'EOF'
          Architectures in the fat file: ferric_example.apple.node/ios-arm64_x86_64-simulator/libferric_example.framework/libferric_example are: x86_64 arm64 
          Architectures in the fat file: ferric_example.apple.node/macos-arm64_x86_64/libferric_example.framework/libferric_example are: x86_64 arm64 
          Architectures in the fat file: ferric_example.apple.node/tvos-arm64_x86_64-simulator/libferric_example.framework/libferric_example are: x86_64 arm64 
          Non-fat file: ferric_example.apple.node/ios-arm64/libferric_example.framework/libferric_example is architecture: arm64
          Non-fat file: ferric_example.apple.node/tvos-arm64/libferric_example.framework/libferric_example is architecture: arm64
          Non-fat file: ferric_example.apple.node/xros-arm64-simulator/libferric_example.framework/libferric_example is architecture: arm64
          Non-fat file: ferric_example.apple.node/xros-arm64/libferric_example.framework/libferric_example is architecture: arm64
          EOF
          # Compare with expected fixture (will fail if files differ)
          diff expected-lipo-info.txt lipo-info.txt
        working-directory: packages/ferric-example
